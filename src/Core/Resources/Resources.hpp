#pragma once
#include <Core/RaCore.hpp>
#include <Core/Utils/StdOptional.hpp>

namespace Ra {
namespace Core {

/** Resources management for Radium.
 *  This namespace contains functions, classes and utilities for resource management.
 *  Resources are :
 *    - configuration file (ui, keymapping, ...)
 *    - default shaders
 *    - ...
 *
 *  This namespace also contains functions allowing to set and access paths to store data
 *  generated by Radium applications, plugins or library in a portable way.
 *  If not set, the default data path is the working directory of the application.
 *  For Gui::BaseApplication derived applications, and for plugins, the default data path can be set
 *  using command line parameter and is stored in the application settings.
 */
namespace Resources {
using namespace Ra::Core::Utils;
/// Radium resources are located in the Resources directory, searched from Radium lib location.
/// @return the path to access Radium Resources if found, otherwise !has_value
/// @note the pattern searched is "Resources/Shaders" since it's the basic resources dir.
RA_CORE_API optional<std::string> getRadiumResourcesPath();

/// Radium plugins are located in the Plugins directory, searched from Radium lib location.
/// @return the path to access Radium Plugins. empty string if not found
/// @note the pattern searched is "Plugins/lib" since it's the basic resources dir.
RA_CORE_API optional<std::string> getRadiumPluginsPath();

/// @return the path prefix to access the current executable (always found)
RA_CORE_API optional<std::string> getBasePath();

/// Search for an accessible Resources (or pattern if given) directory in the current executable (or
/// symbol if != nullptr) path or its parents.
/// @return the pattern path of the dynamic library or exec that contains the given symbol if found,
/// otherwise !has_value
RA_CORE_API optional<std::string> getResourcesPath( void* symbol               = nullptr,
                                                    const std::string& pattern = "Resources" );

/// Data path functions.
/// These functions manage a stack of paths so that application, library or plugins could manage
/// paths to store their data in a state stack-based approach.
///@{
/// Get the current data path
/// If an application's data path was not pushed before the call of this function, the default
/// value, corresponding to the current working directory is returned. Otherwise, the last path
/// pushed using a call to pushDataPath() is returned.
RA_CORE_API std::string getDataPath();

/// Push a data path that will be returned by getDataPath until it is popped.
/// @param datapath the data path to set as current
RA_CORE_API void pushDataPath( std::string datapath );

/// Pop the current data path.
/// The returned data path will not be available anymore for getDataPath().
/// @return the popped data path.
RA_CORE_API std::string popDataPath();
///@}

} // namespace Resources
} // namespace Core
} // namespace Ra
