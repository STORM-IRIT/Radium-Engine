cmake_policy(SET CMP0057 NEW)

#--------------------------- Base configuration for installation and rpath settings ----------------
# Custom Install target, used in run target in source/CMakeLists.txt
add_custom_target(
    Install_${PROJECT_NAME} COMMAND "${CMAKE_COMMAND}" --build . --target install
    WORKING_DIRECTORY "${CMAKE_BINARY_DIR}"
)

# --------------------------------------------------------------------------------------------------
# use, i.e. don't skip the full RPATH for the build tree
set(CMAKE_SKIP_BUILD_RPATH FALSE)
# when building, don't use the install RPATH already (but later on when installing)
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
# add the automatically determined parts of the RPATH which point to directories outside the build
# tree to the install RPATH
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
# the RPATH to be used when installing, but only if it's not a system directory
list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${CMAKE_INSTALL_PREFIX}/lib" isSystemDir)
if("${isSystemDir}" STREQUAL "-1")
    if(APPLE)
        set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib;@executable_path/../lib")
    else()
        set(CMAKE_INSTALL_RPATH "\$ORIGIN:\$ORIGIN/../lib")
    endif()
endif("${isSystemDir}" STREQUAL "-1")

# --------------------------------------------------------------------------------------------------
# Configure components

# Load Radium cmake functions
include(${CMAKE_CURRENT_LIST_DIR}/RadiumSetupFunctions.cmake)

@PACKAGE_INIT@

# manage components
set(Radium_supported_components @RADIUM_COMPONENTS@)
if(Radium_FIND_COMPONENTS)
    # Components are requested, fetch them and their dependencies
    foreach(component ${Radium_FIND_COMPONENTS})
        if(${component} IN_LIST Radium_supported_components)
            set(${component}_FOUND True)
            if(NOT TARGET ${component})
                include("${CMAKE_CURRENT_LIST_DIR}/${component}/Radium${component}Config.cmake")
            endif()
        else()
            set(Radium_FOUND False)
            set(Radium_NOT_FOUND_MESSAGE "Unsupported component: ${component}")
        endif()
    endforeach()
else()
    # No component is requested, fetch only Core
    set(Core_FOUND True)
    if(NOT TARGET Core)
        include("${CMAKE_CURRENT_LIST_DIR}/Core/RadiumCoreConfig.cmake")
    endif()
endif()

if(NOT TARGET Core)
     # Compute paths
    get_filename_component(SELF_DIR "${CMAKE_CURRENT_LIST_FILE}" DIRECTORY)
    # get up in the directories until we found a "Resources/Radium" subdir TODO : instead of
    # 'Resources/Radium' that might not exists if Engine nor Gui are compiled, search for a file
    # identifying Radium (a la Eigen) and that is installed at the root of the Radium Bundle
    while(NOT EXISTS ${SELF_DIR}/Resources/Radium)
        get_filename_component(SELF_DIR "${SELF_DIR}" DIRECTORY)
    endwhile()

    set(RADIUM_CONFIG_DIR ${CMAKE_CURRENT_LIST_DIR})
    set(RADIUM_ROOT_DIR "${SELF_DIR}")
else()
    set(RADIUM_CONFIG_DIR ${CMAKE_CURRENT_LIST_DIR})
    set(RADIUM_ROOT_DIR "${CMAKE_CURRENT_LIST_DIR}")
endif()
set(RADIUM_RESOURCES_DIR "${RADIUM_ROOT_DIR}/Resources/Radium")
set(RADIUM_PLUGINS_DIR "${RADIUM_ROOT_DIR}/Plugins")
