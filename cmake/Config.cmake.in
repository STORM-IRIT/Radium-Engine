#--------------------------- Base cofiguration for installation and rpath settings ---------------------------
#-------------------------------------------------------------------------------
# Set default install location to installed-<Compiler_ID> folder in build dir
# we do not want to install to /usr by default
if (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    set (CMAKE_INSTALL_PREFIX "${CMAKE_CURRENT_BINARY_DIR}/installed-${CMAKE_CXX_COMPILER_ID}" CACHE PATH
            "Install path prefix, prepended onto install directories." FORCE )
    message( "Set install prefix to ${CMAKE_INSTALL_PREFIX}" )
endif()
# Custom Install target, used in run target in source/CMakeLists.txt
if (CMAKE_GENERATOR MATCHES "Makefiles")
    # Make it multithreaded
    add_custom_target( Install_${PROJECT_NAME} COMMAND "${CMAKE_COMMAND}" --build . --target
            install -- -j WORKING_DIRECTORY "${CMAKE_BINARY_DIR}")
else()
    add_custom_target( Install_${PROJECT_NAME} COMMAND "${CMAKE_COMMAND}" --build . --target
            install WORKING_DIRECTORY "${CMAKE_BINARY_DIR}")
endif()
#------------------------------------------------------------------------------------------------------------
# use, i.e. don't skip the full RPATH for the build tree
SET(CMAKE_SKIP_BUILD_RPATH  FALSE)
# when building, don't use the install RPATH already
# (but later on when installing)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
# add the automatically determined parts of the RPATH
# which point to directories outside the build tree to the install RPATH
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
# the RPATH to be used when installing, but only if it's not a system directory
LIST(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${CMAKE_INSTALL_PREFIX}/lib" isSystemDir)
IF("${isSystemDir}" STREQUAL "-1")
    if(APPLE)
        SET(CMAKE_INSTALL_RPATH "@executable_path/../lib")
    else()
        SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
    endif()
ENDIF("${isSystemDir}" STREQUAL "-1")

#--------------------------- Configuration of the Radium exported targets and definitions ---------------------------

include(CMakeFindDependencyMacro)
find_dependency(Threads REQUIRED)
find_dependency(OpenMP REQUIRED)
# Theses paths reflect the paths founds in RadiumEngine/src/Core/external/package
find_dependency(Eigen3 REQUIRED PATHS "${CMAKE_CURRENT_LIST_DIR}/../../../share/eigen3/cmake/")
find_dependency(OpenMesh REQUIRED PATHS "${CMAKE_CURRENT_LIST_DIR}/../../../share/OpenMesh/cmake/")
find_dependency(cpplocate REQUIRED PATHS "${CMAKE_CURRENT_LIST_DIR}/../../../")

set(_supported_components RadiumCore)

include("${CMAKE_CURRENT_LIST_DIR}/RadiumCoreTargets.cmake")

macro(checkOptionalTarget TARGET)
    if(EXISTS "${CMAKE_CURRENT_LIST_DIR}/Radium${TARGET}Targets.cmake" )
        list(APPEND _supported_components Radium${TARGET})
    endif()
endmacro()

# Check available library targets
checkOptionalTarget(Engine)
checkOptionalTarget(IO)
checkOptionalTarget(PluginBase)
checkOptionalTarget(GuiBase)

# Check the user request matches the available library targets
set(Radium_FOUND True)
foreach(_comp ${Radium_FIND_COMPONENTS})
  list(FIND _supported_components ${_comp} ${_comp}_FOUND)
  if (${${_comp}_FOUND} EQUAL -1)
    set(Radium_FOUND False)
    set(Radium_NOT_FOUND_MESSAGE "Unsupported component: ${_comp}")
  endif()
endforeach()

if(RadiumEngine_FOUND)
    # Theses paths reflect the paths founds in RadiumEngine/src/Engine/external/package
    find_dependency(glm REQUIRED PATHS "${CMAKE_CURRENT_LIST_DIR}/../../../lib/cmake/glm/")
    find_dependency(glbinding REQUIRED PATHS "${CMAKE_CURRENT_LIST_DIR}/../../../" )
    find_dependency(globjects REQUIRED PATHS "${CMAKE_CURRENT_LIST_DIR}/../../../" )

    include("${CMAKE_CURRENT_LIST_DIR}/RadiumEngineTargets.cmake" )
endif()

if(RadiumIO_FOUND)
    include("${CMAKE_CURRENT_LIST_DIR}/RadiumIOTargets.cmake" )

    # Detect if library has been compiled using assimp and tinyply
    get_target_property( deps Radium::RadiumIO INTERFACE_LINK_LIBRARIES)
    list( FIND deps "assimp::assimp" depAssimpFound)
    list( FIND deps "tinyply" depTinyPLYFound)

    # Theses paths reflect the paths founds in RadiumEngine/src/IO/external/package
    if( depAssimpFound GREATER_EQUAL "0")
        find_dependency(assimp 5.0 REQUIRED PATHS "${CMAKE_CURRENT_LIST_DIR}/../../../lib/cmake/assimp-5.0/")
    endif()
    if( depTinyPLYFound GREATER_EQUAL "0")
        find_dependency(tinyply REQUIRED PATHS "${CMAKE_CURRENT_LIST_DIR}/../../../lib/cmake/tinyply/")
    endif()

endif()


if(RadiumPluginBase_FOUND)
    find_dependency(Qt5 COMPONENTS Core REQUIRED)
    include("${CMAKE_CURRENT_LIST_DIR}/RadiumPluginBaseTargets.cmake" )
endif()

if(RadiumGuiBase_FOUND)
    find_dependency(Qt5 COMPONENTS Core Widgets OpenGL Xml REQUIRED)
    include("${CMAKE_CURRENT_LIST_DIR}/RadiumGuiBaseTargets.cmake" )
endif()

# Compute paths
get_filename_component(SELF_DIR "${CMAKE_CURRENT_LIST_FILE}" DIRECTORY)
# get up in the directories until we found a "Resource" subdir
while( NOT EXISTS ${SELF_DIR}/Resources)
  get_filename_component(SELF_DIR "${SELF_DIR}" DIRECTORY)
endwhile()

set(RADIUM_ROOT_DIR "${SELF_DIR}")
set(RADIUM_RESOURCES_DIR "${SELF_DIR}/Resources")

include(${CMAKE_CURRENT_LIST_DIR}/application_setup.cmake)


