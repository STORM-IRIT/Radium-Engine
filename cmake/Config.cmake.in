include(CMakeFindDependencyMacro)
find_dependency(Threads REQUIRED)
find_dependency(OpenMP REQUIRED)
# Theses paths reflect the paths founds in RadiumEngine/src/Core/external/package
find_dependency(Eigen3 REQUIRED PATHS "${CMAKE_CURRENT_LIST_DIR}/../../../share/eigen3/cmake/")
find_dependency(OpenMesh REQUIRED PATHS "${CMAKE_CURRENT_LIST_DIR}/../../../share/OpenMesh/cmake/")
find_dependency(cpplocate REQUIRED PATHS "${CMAKE_CURRENT_LIST_DIR}/../../../")

set(_supported_components RadiumCore)

include("${CMAKE_CURRENT_LIST_DIR}/RadiumCoreTargets.cmake")

macro(checkOptionalTarget TARGET)
    if(EXISTS "${CMAKE_CURRENT_LIST_DIR}/Radium${TARGET}Targets.cmake" )
        list(APPEND _supported_components Radium${TARGET})
    endif()
endmacro()

# Check available library targets
checkOptionalTarget(Engine)
checkOptionalTarget(IO)
checkOptionalTarget(PluginBase)
checkOptionalTarget(GuiBase)

# Check the user request matches the available library targets
set(Radium_FOUND True)
foreach(_comp ${Radium_FIND_COMPONENTS})
  list(FIND _supported_components ${_comp} ${_comp}_FOUND)
  if (${${_comp}_FOUND} EQUAL -1)
    set(Radium_FOUND False)
    set(Radium_NOT_FOUND_MESSAGE "Unsupported component: ${_comp}")
  endif()
endforeach()

if(RadiumEngine_FOUND)
    # Theses paths reflect the paths founds in RadiumEngine/src/Engine/external/package
    find_dependency(glm REQUIRED PATHS "${CMAKE_CURRENT_LIST_DIR}/../../../lib/cmake/glm/")
    find_dependency(glbinding REQUIRED PATHS "${CMAKE_CURRENT_LIST_DIR}/../../../" )
    find_dependency(globjects REQUIRED PATHS "${CMAKE_CURRENT_LIST_DIR}/../../../" )

    include("${CMAKE_CURRENT_LIST_DIR}/RadiumEngineTargets.cmake" )
endif()

if(RadiumIO_FOUND)
    include("${CMAKE_CURRENT_LIST_DIR}/RadiumIOTargets.cmake" )

    # Detect if library has been compiled using assimp and tinyply
    get_target_property( deps Radium::RadiumIO INTERFACE_LINK_LIBRARIES)
    list( FIND deps "assimp::assimp" depAssimpFound)
    list( FIND deps "tinyply" depTinyPLYFound)

    # Theses paths reflect the paths founds in RadiumEngine/src/IO/external/package
    if( depAssimpFound GREATER_EQUAL "0")
        message("RadiumIO built with Assimp support: exporting dependency")
        find_dependency(assimp 5.0 REQUIRED PATHS "${CMAKE_CURRENT_LIST_DIR}/../../../lib/cmake/assimp-5.0/")
    endif()
    if( depTinyPLYFound GREATER_EQUAL "0")
        message("RadiumIO built with TinyPLY support: exporting dependency")
        find_dependency(tinyply REQUIRED PATHS "${CMAKE_CURRENT_LIST_DIR}/../../../lib/cmake/tinyply/")
    endif()

endif()


if(RadiumPluginBase_FOUND)
    find_dependency(Qt5 COMPONENTS Core REQUIRED)
    include("${CMAKE_CURRENT_LIST_DIR}/RadiumPluginBaseTargets.cmake" )
endif()

if(RadiumGuiBase_FOUND)
    find_dependency(Qt5 COMPONENTS Core Widgets OpenGL Xml REQUIRED)
    include("${CMAKE_CURRENT_LIST_DIR}/RadiumGuiBaseTargets.cmake" )
endif()

# Compute paths
get_filename_component(SELF_DIR "${CMAKE_CURRENT_LIST_FILE}" DIRECTORY)
# get up in the directories until we found a "Resource" subdir
while( NOT EXISTS ${SELF_DIR}/Resources)
  get_filename_component(SELF_DIR "${SELF_DIR}" DIRECTORY)
endwhile()

set(RADIUM_ROOT_DIR "${SELF_DIR}")
set(RADIUM_RESOURCES_DIR "${SELF_DIR}/Resources")

# -------------------------- Usefull fonctions for application and plugins client  ------------------------------------
# TODO : works well on MacOs : must be tested on other systems
include(CMakeParseArguments)
# Install resources : link (copy under window) the resource dir DIRECTORY into the buildtree at the given BUILDLOCATION and install the
# required files into the <bundle>/Resources
# If called only with a directory, all the files in this directory and subdirs will be installed
# to be called with
# installResources ( TARGET theTarget`
#                    [BUILDLOCATION whereToLinkInTheBuildTree]
#                    DIRECTORY theBaseRessourceDirectory
#                    [FILES [file1 [file2 ... ]]]
#
function(installTargetResources)
    # "declare" and parse parameters
    cmake_parse_arguments(
            PARSED_ARGS
            ""
            "TARGET;DIRECTORY;BUILDLOCATION"
            "FILES"
            ${ARGN}
    )
    # verify that the function was called with expected parameters
    if (NOT PARSED_ARGS_TARGET)
        message(FATAL_ERROR " [installResources] You must provide a target that need these resources")
    endif ()
    if (NOT PARSED_ARGS_DIRECTORY)
        message(FATAL_ERROR " [installResources] You must provide a resource directory")
    endif ()
    if (NOT PARSED_ARGS_BUILDLOCATION)
               # linking resours in the current bin dir of the build tree
               set(PARSED_ARGS_BUILDLOCATION  ${CMAKE_CURRENT_BINARY_DIR})
    endif ()
    # compute resources dir for build tree and install tree
    get_filename_component(rsc_dir ${PARSED_ARGS_DIRECTORY} NAME)
    set(buildtree_dir ${PARSED_ARGS_BUILDLOCATION})
    # installing resources in the buildtree (link if available, copy if not)
    message(STATUS " [installResources] Linking resources directory ${PARSED_ARGS_DIRECTORY} for target ${PARSED_ARGS_TARGET} into ${buildtree_dir}/Resources/${rsc_dir}")
    file(MAKE_DIRECTORY "${buildtree_dir}")
    if (MSVC OR MSVC_IDE OR MINGW)
        add_custom_command(
                TARGET ${PARSED_ARGS_TARGET}
                POST_BUILD
                COMMAND ${CMAKE_COMMAND} -E copy_directory ${PARSED_ARGS_DIRECTORY} "${buildtree_dir}/${rsc_dir}"
                VERBATIM
                )
    else ()
        add_custom_command(
                TARGET ${PARSED_ARGS_TARGET}
                POST_BUILD
                COMMAND ${CMAKE_COMMAND} -E create_symlink ${PARSED_ARGS_DIRECTORY} "${buildtree_dir}/${rsc_dir}"
                VERBATIM
                )
    endif ()

   # Install in the install tree
   # Identify the individual files (to preserve directory structure)
   message(STATUS " [installResources] configuring install for requested files of ${PARSED_ARGS_DIRECTORY}")
   if (NOT PARSED_ARGS_FILES)
       file(GLOB_RECURSE PARSED_ARGS_FILES RELATIVE ${PARSED_ARGS_DIRECTORY} ${PARSED_ARGS_DIRECTORY}/*)
   endif ()
   foreach (file ${PARSED_ARGS_FILES})
       get_filename_component( file_dir ${file} DIRECTORY )
       if (APPLE)
           install(
               FILES ${PARSED_ARGS_DIRECTORY}/${file}
               DESTINATION ${PARSED_ARGS_TARGET}.app/Contents/Resources/${rsc_dir}/${file_dir}
               )
       else()
           install(
               FILES ${PARSED_ARGS_DIRECTORY}/${file}
               DESTINATION Resources/${rsc_dir}/${file_dir}
               )
       endif()
   endforeach()
endfunction()


# Configuration of the build and installation procedure
# Allows to install application with dependent resources
# usage :
#   configure_radium_app_install(
#         NAME theTargetName # <- this must be an executable
#         RESOURCES ResourceDir1 ResourceDir2 # <- acept a list of directories
# )
function(configure_radium_app_install)
    # "declare" and parse parameters
    cmake_parse_arguments(
            PARSED_ARGS
            ""
            "NAME"
            "RESOURCES" # list of directories containing the resources to install - optional
            ${ARGN}
    )
    if (NOT PARSED_ARGS_NAME)
        message(FATAL_ERROR " [configure_radium_app] You must provide the main target of the application")
    endif ()
    # configure the application
    message(STATUS " Configuring application ${PARSED_ARGS_NAME}")
    if(APPLE)
        set_target_properties(${PARSED_ARGS_NAME} PROPERTIES MACOSX_BUNDLE_BUNDLE_NAME ${PARSED_ARGS_NAME})
        set_target_properties(${PARSED_ARGS_NAME} PROPERTIES MACOSX_BUNDLE_BUNDLE_GUI_IDENTIFIER "com.radium.${PARSED_ARGS_NAME}")
        set_target_properties(${PARSED_ARGS_NAME} PROPERTIES MACOSX_BUNDLE_LONG_VERSION_STRING "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}")
        set_target_properties(${PARSED_ARGS_NAME} PROPERTIES MACOSX_BUNDLE_SHORT_VERSION_STRING "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}")
    endif()
    # Configure the executable installation
    install(
        TARGETS ${PARSED_ARGS_NAME}
        BUNDLE DESTINATION "."
        RUNTIME DESTINATION bin
    )
    if(APPLE)
        install(CODE "
            include(BundleUtilities)
            file(REMOVE_RECURSE ${CMAKE_INSTALL_PREFIX}/${PARSED_ARGS_NAME}.app/Contents/Resources)
            file(COPY ${RADIUM_RESOURCES_DIR} DESTINATION ${CMAKE_INSTALL_PREFIX}/${PARSED_ARGS_NAME}.app/Contents)
            fixup_bundle(${CMAKE_INSTALL_PREFIX}/${PARSED_ARGS_NAME}.app \"\" \"${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}\")
            "
        )
    else()
        install(DIRECTORY ${RADIUM_RESOURCES_DIR} DESTINATION ${CMAKE_INSTALL_PREFIX})
    endif()
    # Configure tnhe resources installation
    if (PARSED_ARGS_RESOURCES)
        foreach (resLocation ${PARSED_ARGS_RESOURCES})
            message(STATUS " Installing resources ${resLocation} for ${PARSED_ARGS_NAME} ")
            if (APPLE)
                installTargetResources(
                               TARGET ${PARSED_ARGS_NAME}
                               DIRECTORY ${resLocation}
                               BUILDLOCATION ${CMAKE_CURRENT_BINARY_DIR}/${PARSED_ARGS_NAME}.app/Contents/Resources
                           )
            else()
                installTargetResources(
                   TARGET ${PARSED_ARGS_NAME}
                   DIRECTORY ${resLocation}
                   BUILDLOCATION ${CMAKE_CURRENT_BINARY_DIR}/Resources
                )
            endif()
        endforeach()
    endif()
endfunction()
