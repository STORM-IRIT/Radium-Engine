name: Guideline Checks

on:
  pull_request:
    branches:
      - release-candidate
  push:
    branches:
      - master
      - release-candidate
jobs:
  hitory:
    if: ${{ github.event_name != 'push' }}
    name: Check linear history
    runs-on: ubuntu-latest
    steps:
      - name: Checkout remote head
        uses: actions/checkout@master
        with:
          fetch-depth: 0
          # checkout branch head instead of merge commit to have the potientially commited change from formatter
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Check up to date linear history, without merges
        uses: skx/github-action-tester@master
        with:
          script: scripts/is-history-pr-compatible.sh
      - name: Status report README PLEASE
        if: ${{ failure() && github.event.pull_request.head.repo.full_name != github.repository }}
        run: |
              echo **CHECK LINEAR HISTORY FAIL**
              echo
              echo Please rebase on current up to date master,
              echo "without merge commits (e.g. you can squash them)."
  format:
    name: Check format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR
        uses: actions/checkout@master
      - name: Check coding style
        id: format-check
        uses: DoozyX/clang-format-lint-action@v0.6
        with:
          source: '.'
          exclude: './tests/external ./external'
          extensions: 'hpp,inl,cpp,glsl'
          clangFormatVersion: 9
          style: file
      - name: xxxxxxxxxx Status report README PLEASE xxxxxxxxxx
        if: ${{ failure() && github.event.pull_request.head.repo.full_name != github.repository }}
        run: |
            echo **CHECK FORMAT FAIL**
            echo You can trigger automatic format action on github with the special branch gh-formatter.
            echo This special branch trigger clang-format and add a commit with the modified files.
            echo 
            echo git branch -D gh-formatter
            echo git switch -c gh-formatter
            echo
            echo Ensure you have the .github/workflows/formatter.yml file, if not add it to your branch from
            echo https://github.com/STORM-IRIT/Radium-Engine/tree/master/.github/workflows.
            echo
            echo **ADAPT REMOTE TO YOUR SETUP**, here origin is supposed to correspond to your repo: ${{ github.event.pull_request.head.repo.full_name }}
            echo 
            echo git push -f --set-upstream origin gh-formatter
            echo 
            echo Wait for git action to finish, it will add a commit to orogin/gh-formatter.
            echo Then take this commit back to your branch and update your PR:
            echo 
            echo git pull
            echo git checkout ${{  github.head_ref }}
            echo git reset --hard gh-formatter
            echo git push
            echo 

      - name: Update badge en merge (failure)
        if: ${{ failure() &&  github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_BADGES_TOKEN }}
          gistID: ${{ secrets.GIST_BADGES_SECRET }}
          filename: format.json
          label: format
          message: 'not conform'
          namedLogo: C++
          color: CC1B1B
      - name: Update badge en merge (success)
        if: ${{ success() &&  github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_BADGES_TOKEN }}
          gistID: ${{ secrets.GIST_BADGES_SECRET }}
          filename: format.json
          label: format
          message: conform
          namedLogo: C++
          color: 1BCC1B
