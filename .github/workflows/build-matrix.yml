name: build
# This workflow builds radium lib

# TRIGGERED BY
# - push-master-ci.yml
# - push-rc-ci.yml

defaults:
  run:
    shell: bash

on:
  workflow_call:
    secrets:
      GIST_BADGES_TOKEN:
        required: false
      GIST_BADGES_SECRET:
        required: false
    inputs:
      use-double:
        required: false
        # boolean are not well handled https://github.com/actions/runner/issues/1483
        type: string
        default: "false"
      windows:
        required: false
        type: string
        default: "true"
      macos:
        required: false
        type: string
        default: "true"
      linux:
        required: false
        type: string
        default: "true"
      build-release:
        required: false
        type: string
        default: "true"
      build-debug:
        required: false
        type: string
        default: "true"
      coverage:
        required: false
        type: string
        default: "false"
      generate-badges:
        required: false
        type: string
        default: "false"
      qt5:
        required: false
        type: string
        default: "true"
      qt6:
        required: false
        type: string
        default: "true"

env:
  ext-dir: $GITHUB_WORKSPACE/external/install/

jobs:
  # inpiration from https://www.cynkra.com/blog/2020-12-23-dynamic-gha/
  create-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set Matrix
        id: set-matrix
        run: |
          matrix=$((
          echo '{ "config" : ['
          [[ "true" == "${{ inputs.windows }}" ]] && echo '{ "name": "Windows MSVC", "os": "windows-latest", "cc": "cl.exe", "cxx": "cl.exe", "icon": "Windows", "extra-flags": "" }'
          [[ "true" == "${{ inputs.windows }}" && "true" == "${{inputs.linux}}" ]] && echo ','
          [[ "true" == "${{ inputs.linux }}" ]] && echo '{ "name": "Ubuntu gcc", "os": "ubuntu-latest", "cc": "gcc-10", "cxx": "g++-10", "icon": "Linux", "extra-flags": "-DCMAKE_CXX_FLAGS=-Wno-deprecated-declarations -DRADIUM_ENABLE_GL_TESTING=ON" }'
          [[ "true" == "${{ inputs.windows }}" || "true" == "${{inputs.linux}}" ]] && [[ "true" == "${{inputs.macos}}" ]] && echo ','
          [[ "true" == "${{ inputs.macos }}" ]] && echo '{ "name": "MacOS clang", "os": "macos-latest", "cc": "clang", "cxx": "clang++", "icon": "Apple", "extra-flags": "-DCMAKE_CXX_FLAGS=-Wno-deprecated-declarations" }'
          echo '],'
          echo '"build-type" : ['
          [[ "true" == "${{ inputs.build-debug }}" ]] && echo '"Debug"'
          [[ "true" == "${{ inputs.build-debug }}" && "true" == "${{ inputs.build-release }}" ]] && echo ','
          [[ "true" == "${{ inputs.build-release }}" ]] && echo '"Release"'
          echo '],'
          echo '"precision" : ['
          echo '{ "name": "float", "value": "OFF"}'
          [[ "true" == "${{ inputs.use-double }}" ]] && echo ', { "name": "double", "value": "ON" }'
          echo '],'
          echo '"qtversion" : ['
          [[ "true" == "${{ inputs.qt5 }}" ]] && echo '{ "name" : "qt5", "value" : "5.15.1"}'
          [[ "true" == "${{ inputs.qt5 }}" && "true" == "${{ inputs.qt6 }}" ]] && echo ','
          [[ "true" == "${{ inputs.qt6 }}" ]] && echo '{ "name" : "qt6", "value" : "6.2.0"}'
          echo '],'
          echo '"coverage" : ['
          [[ "true" == "${{ inputs.coverage }}" ]] && echo '{ "value" : "ON", "extra-flags" : "-DRADIUM_ENABLE_GL_TESTING=ON" }' || echo '{ "value" : "OFF", "extra-flags" : "" }'
          echo "]"
          echo "}"
          ) | jq -c .)
          echo $matrix
          echo $matrix | jq .
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  check-matrix:
    runs-on: ubuntu-latest
    needs: create-matrix
    steps:
      - name: Install json2yaml
        run: |
          sudo npm install -g json2yaml
      - name: Check matrix definition
        run: |
          matrix='${{ needs.create-matrix.outputs.matrix }}'
          echo $matrix
          echo $matrix | jq .
          echo $matrix | json2yaml

  build:
    needs: create-matrix
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.create-matrix.outputs.matrix) }}
    steps:
      - name: Install Ninja
        shell: bash
        run: ${{ runner.os == 'macOS' && 'brew install ninja' || runner.os == 'Windows' && 'choco install ninja' || 'sudo apt-get install ninja-build' }}
      - name: Add msbuild to PATH
        uses: seanmiddleditch/gha-setup-vsdevenv@master
        if: runner.os == 'Windows'
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          cache: true
          cache-key-prefix: install-qt-action-${{ matrix.config.name }}-${{ matrix.qtversion.value }}
          version: ${{ matrix.qtversion.value }}
      - name: Install dep Linux
        if: runner.os == 'Linux'
        run: sudo apt-get install -y libglfw3-dev
      - name: Install tests dep
        if: runner.os == 'Linux'
        run: sudo apt-get install -y libxml2-utils
      - name: Install dep coverage
        if: ${{ inputs.coverage == 'true' }}
        run: sudo apt-get install -y lcov
      - name: Install dep MacOS
        if: runner.os == 'macOS'
        run: brew install glfw
      - name: Install dep windows checkout
        if: runner.os == 'Windows'
        uses: actions/checkout@v2
        with:
          repository: glfw/glfw
          ref: 3.3.4
          path: glfw
      - name: Build windows dep, config path
        if: runner.os == 'Windows'
        run: |
          mkdir $GITHUB_WORKSPACE/glfw_install/
          cmake -S glfw -B glfw/build-shared -G "Visual Studio 17 2022" -DBUILD_SHARED_LIBS=OFF -DGLFW_BUILD_EXAMPLES=OFF -DGLFW_BUILD_TESTS=OFF -DGLFW_BUILD_DOCS=OFF -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/glfw_install/
          cmake --build glfw/build-shared --parallel --config Release
          cmake --build glfw/build-shared --target install --config Release
          echo "glfw-path=-Dglfw3_DIR=\$GITHUB_WORKSPACE/glfw_install/lib/cmake/glfw3/" >> $GITHUB_ENV
          # Setting paths to dll needed by catch2 and run in build dir
          echo "$GITHUB_WORKSPACE/build/Radium-Engine/src/Core" >> $GITHUB_PATH
          echo "$GITHUB_WORKSPACE/build/Radium-Engine/src/Engine" >> $GITHUB_PATH
          echo "$GITHUB_WORKSPACE/build/Radium-Engine/src/Gui" >> $GITHUB_PATH
          echo "$GITHUB_WORKSPACE/build/Radium-Engine/src/Headless" >> $GITHUB_PATH
          echo "$GITHUB_WORKSPACE/build/Radium-Engine/src/IO" >> $GITHUB_PATH
          echo "$GITHUB_WORKSPACE/build/Radium-Engine/src/PluginBase" >> $GITHUB_PATH
          echo "$GITHUB_WORKSPACE/glfw_install/lib/cmake/glfw3/" >> $GITHUB_PATH
          echo "${{ env.ext-dir }}/bin" >> $GITHUB_PATH
          echo "${{ env.ext-dir }}/glbinding" >> $GITHUB_PATH
          echo "${{ env.ext-dir }}/globjects" >> $GITHUB_PATH
          echo "${{ env.ext-dir }}/cpplocate" >> $GITHUB_PATH
      - name: Prepare directories
        run: |
          mkdir -p install/
          mkdir -p src/Radium-Engine
          mkdir -p build/Radium-Engine
          mkdir -p external/install/
          mkdir -p external/build/
      - name: Checkout remote head
        uses: actions/checkout@master
        with:
          path: src/Radium-Engine
      - name: pull updated repo (e.g. with new VERSION)
        if: ${{ github.event_name == 'push' }}
        run: git -C src/Radium-Engine pull origin ${{ github.event.ref }}
      - name: Cache externals
        id: cache-external
        uses: actions/cache@v3
        with:
          path: external
          key: ${{ matrix.config.name }}-${{ matrix.build-type }}-${{ matrix.qtversion.name }}-external-v1-${{ hashFiles('src/Radium-Engine/external/**/CMakeLists.txt') }}
      - name: Configure and build external
        if: steps.cache-external.outputs.cache-hit != 'true'
        run: |
          cd external/build/
          cmake ../../src/Radium-Engine/external  -GNinja -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
          -DCMAKE_C_COMPILER=${{ matrix.config.cc }} -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
          -DCMAKE_EXECUTE_PROCESS_COMMAND_ECHO=STDOUT -DCMAKE_INSTALL_MESSAGE=LAZY \
          -DRADIUM_UPDATE_VERSION=OFF \
          -DCMAKE_INSTALL_PREFIX=../install/
          cmake --build . --parallel --config ${{ matrix.build-type }}
      - name: Configure Radium
        run: |
          cd build/Radium-Engine
          cmake ../../src/Radium-Engine -GNinja -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
          -DCMAKE_C_COMPILER=${{ matrix.config.cc }} -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
          ${{ matrix.config.extra-flags }} \
          ${{ matrix.coverage.extra-flags }} \
          -DCMAKE_EXECUTE_PROCESS_COMMAND_ECHO=STDOUT \
          -DRADIUM_USE_DOUBLE=${{ matrix.precision.value }} -DRADIUM_UPDATE_VERSION=OFF -DRADIUM_ENABLE_PCH=ON \
          -DRADIUM_INSTALL_DOC=OFF -DRADIUM_ENABLE_TESTING=ON -DRADIUM_ENABLE_EXAMPLES=ON -DRADIUM_ENABLE_COVERAGE=${{ matrix.coverage.value }} \
          -C ${{ env.ext-dir }}/radium-options.cmake \
          -DCMAKE_INSTALL_PREFIX=../../install/ \
          ${{ env.glfw-path }}
      - name: Build Radium
        run: |
          cmake --build build/Radium-Engine --parallel --config ${{ matrix.build-type }} --target install
      - name: Run unit tests
        if: ${{ inputs.coverage == 'false' }}
        run: |
          cmake --build build/Radium-Engine --parallel --config ${{ matrix.build-type }} --target check
          cmake --build build/Radium-Engine --parallel --config ${{ matrix.build-type }} --target Install_CoreExample
          ./install/bin/CoreExample
      - name: Extract ref for badges prefix
        if: always()
        shell: bash
        run: |
          GITHUB_REF=${{ github.ref }}
          echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
        id: extract-branch
      - name: Update badge on merge (failure)
        if: ${{ failure() && inputs.generate-badges == 'true' }}
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_BADGES_TOKEN }}
          gistID: ${{ secrets.GIST_BADGES_SECRET }}
          filename: "${{ steps.extract-branch.outputs.branch }}.${{ matrix.config.os }}.${{ matrix.build-type }}.${{ matrix.precision.name }}.json"
          label: CI ${{ matrix.build-type }}  ${{ matrix.precision.name }}
          message: 'falling'
          namedLogo: ${{ matrix.config.icon }}
          logoColor: white
          color: CC1B1B
      - name: Update badge on merge (success)
        if: ${{ success() && inputs.generate-badges == 'true' }}
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_BADGES_TOKEN }}
          gistID: ${{ secrets.GIST_BADGES_SECRET }}
          filename: "${{ steps.extract-branch.outputs.branch }}.${{ matrix.config.os }}.${{ matrix.build-type }}.${{ matrix.precision.name }}.json"
          label: CI ${{ matrix.build-type }}  ${{ matrix.precision.name }}
          message: 'passing'
          namedLogo: ${{ matrix.config.icon }}
          logoColor: white
          color: 1BCC1B
      - name: Create and upload coverage report
        if: ${{ inputs.coverage == 'true' }}
        run: |
          cd build/Radium-Engine
          cmake --build . --config Debug --target coverage
          # Uploading report to CodeCov
          bash <(curl -s https://codecov.io/bash) -f coverage.info -R ../../src/Radium-Engine || echo "Codecov did not collect coverage reports"
