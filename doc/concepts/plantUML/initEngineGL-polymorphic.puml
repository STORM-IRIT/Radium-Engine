@startuml
'https://plantuml.com/sequence-diagram

title Initialisation and run sequence for Gui::BaseApplication related applications \n Customizable BaseApplication initialization \n

participant main
participant UserApplication
participant "Gui::BaseApplication"
participant "Engine::RadiumEngine"
participant "Gui::MainWindowInterface"
participant "Gui::Viewer"
participant "Gui::WindowQt"
participant OpenGL

group Kind of user applications
    group Mara (User defined app)
    note left of "Engine::RadiumEngine" #AACCFF
    UserApplication = class derived from "Gui::BaseApplication".
    Usage of the inherited class with specific implementation of MainWindowInterface.
    Application is controlled by the MainWindowInterface implementation.
    end note
    -> main : start
    activate main #AACCFF
    main -> UserApplication ++ : create( **WindowFactory** )

    end

    group Radium Sandbox (Radium Apps)
    note left of "Engine::RadiumEngine" #BBFFCC
    UserApplication = main function.
    Direct usage of "Gui::BaseApplication" with specific implementation of MainWindowInterface.
    Application is controlled by the MainWindowInterface implementation.
    end note
    -> UserApplication : start
    activate UserApplication #BBFFCC
    end

    group Radium demos (Example Apps)
    note left of "Engine::RadiumEngine" #FFCCBB
    UserApplication = main function.
    Direct usage of "Gui::BaseApplication" with Gui::SimpleWindow as MainWindowInterface.
    The application populates the Engine and parameterizes timers before entering event loop.
    Application is automatic.
    end note
    -> UserApplication : start
    activate UserApplication #FFCCBB
    end
end

== Application creation and internal configuration ==
UserApplication -> "Gui::BaseApplication" ++ : create( argc, argv, appname )
return

== Engine and gui configuration ==
UserApplication -> "Gui::BaseApplication" ++ : initialize( **WindowFactory** )

"Gui::BaseApplication" -> "Engine::RadiumEngine" ++ : Create & initialize
return Engine singleton

== Configure Engine and scene services ==
"Gui::BaseApplication" -> "Gui::BaseApplication" ++ : engineBaseInitialization
group #FF5555 Do we define some "engine default services"
alt Add initDefaultSystems() method in Engine::RadiumEngine class
"Gui::BaseApplication" -> "Engine::RadiumEngine" : initDefaultSystems()
end
alt Configure the systems explicitely in the application
"Gui::BaseApplication" -> "Engine::RadiumEngine" : Add geometry system
end
end

"Gui::BaseApplication" -> "Engine::RadiumEngine" : Configure time management
group Overridden engineBaseInitialization methods
    group #AACCFF Mara (User defined app)
    "Gui::BaseApplication" -> UserApplication ++ : specific engine internals
    return
    end
end
return

== Configure OpenGL context and drawing/application window ==
"Gui::BaseApplication" -> "Gui::MainWindowInterface" ++ : createMainWindow from **WindowFactory**
        "Gui::MainWindowInterface" -> "Gui::Viewer" ++ : create
            "Gui::Viewer" -> "Gui::WindowQt" ++ : create
                "Gui::WindowQt" -> OpenGL ++ : create context
                return context
            return
        return
        group Connections made by specific implementations of "Gui::MainWindowInterface"
            group #FFCCBB  Gui:: SimpleWindow
            "Gui::MainWindowInterface" -> "Gui::MainWindowInterface" : no connections
            end
            group #BBFFCC Sandbox::mainWindow
            "Gui::MainWindowInterface" -> "Gui::Viewer" : connect slot onGLInitialized() to signal glInitialized
            "Gui::MainWindowInterface" -> "Gui::Viewer" : connect slot onRendererReady() to signal rendererReady
            end
            group #AACCFF Mara::mainWindow
            "Gui::MainWindowInterface" -> "Gui::MainWindowInterface" : no connections
            end
        end
return mainWindow

"Gui::BaseApplication" -> "Gui::MainWindowInterface" ++ : getViewer()
return viewer

== Configure event management on the drawing/application window ==

"Gui::BaseApplication" -> "Gui::Viewer" : connect slot engineOpenGLInitialize() to  signal requestEngineOpenGLInitialization

"Gui::BaseApplication" -> "Gui::Viewer" : connect slot initializeGL() to signal glInitialized
"Gui::BaseApplication" -> "Gui::Viewer" : connect slot askForUpdate() to signal needUpdate

== Make OpenGL and drawing environment to be initialized ==
"Gui::BaseApplication" -> "Gui::MainWindowInterface" : show
    "Gui::MainWindowInterface" -> "Gui::Viewer" : show
    "Gui::Viewer" -> "Gui::WindowQt" : show
    "Gui::WindowQt" -> OpenGL ++ : makeCurrent
    "Gui::WindowQt" -> "Gui::Viewer" ++ : InitializeGL
        "Gui::Viewer" -> "Gui::Viewer" : globject init
        group Signal requestEngineOpenGLInitialization
        "Gui::Viewer" -> "Gui::BaseApplication" ++ : engineOpenGLInitialize
            "Gui::BaseApplication" -> "Engine::RadiumEngine" ++ : initializeGL()
            return
            group #AACCFF Mara (User defined app)
            "Gui::BaseApplication" -> UserApplication ++: addRenderers()
                UserApplication -> "Gui::Viewer" : addRenderer(Forward)
                UserApplication -> "Gui::MainWindowInterface" : build Forward renderer gui
                UserApplication -> "Gui::Viewer" : addRenderer(NodeBased)
                UserApplication -> "Gui::MainWindowInterface" : build NodeBased renderer gui
            return
            end
        return
        end
        "Gui::Viewer" -> "Gui::Viewer" : Services init
        note left
        Gizmos and other OpenGL related internals.
        end note
        group Signal glInitialized
            group #BBFFCC Sandbox::mainWindow
            "Gui::MainWindowInterface" <- "Gui::Viewer" ++: onGLInitialized()
            "Gui::MainWindowInterface" -> "Gui::Viewer" : addRenderer(Forward)
            return
            end

            "Gui::BaseApplication" <- "Gui::Viewer" ++ : initializeGL()
            "Gui::BaseApplication" -> "Gui::BaseApplication" : init pre-inserted plugin's GL
            group Overridden initializeGl methods
                group #AACCFF Mara (User defined app)
                "Gui::BaseApplication" -> UserApplication ++ : initializeGl()
                return
                end
            end
            return
        end
        "Gui::Viewer" -> "Gui::Viewer" : openGL OK
        "Gui::Viewer" -> "Gui::Viewer" : check renderers
        note left
        If no renderer was added, add the default one.
        Initializes all added renderers.
        end note
    return

    "Gui::WindowQt" -> OpenGL : doneCurrent
    return
    "Gui::WindowQt" --> "Gui::Viewer"
    "Gui::Viewer" --> "Gui::MainWindowInterface"
    "Gui::MainWindowInterface" --> "Gui::BaseApplication"
== Configure and initialize extensions/plugins for application and input/output capabilities on the Engine ==
    "Gui::BaseApplication" -> "Gui::BaseApplication" : Load Plugins
    "Gui::BaseApplication" -> "Engine::RadiumEngine" ++ : registerFileLoaders
    note left of "Engine::RadiumEngine"
    Radium::IO loaders if configured :
      - Tinyply
      - Assimp
    end note
    return
    group Overridden addApplicationExtension methods
        group #AACCFF Mara (User defined app)
        "Gui::BaseApplication" -> UserApplication ++ : addApplicationExtension()
        UserApplication -> "Engine::RadiumEngine" : registerFileLoader
        return
        end
    end
return
== Application / Engine ready to be used ==
group after "Gui::BaseApplication" creation

    group Radium demos (Example Apps)

        UserApplication -> "Engine::RadiumEngine" : scene configuration
        UserApplication -> "Gui::BaseApplication" ++: event loop
        return exit()
        deactivate UserApplication #FFCCBB
        <- UserApplication : exit
    end
    group Radium Sandbox (Radium Apps)

        UserApplication -> "Gui::BaseApplication" ++: event loop
        return  exit()
        deactivate UserApplication #BBFFCC
        <- UserApplication : exit
    end

    group Mara (User defined app)
        main -> UserApplication ++: event loop
        return exit()
        deactivate main #AACCFF
        <- main : exit
    end
end


@enduml
